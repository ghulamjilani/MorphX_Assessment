# frozen_string_literal: true

module Sales
  class ProductUrl
    attr_accessor :uri, :affiliate_url, :direct_url

    URL_SHORTENERS = %w[rstyle.me bit.ly].freeze

    # Affiliate partners
    # Format is: key - host, value - url param that points to original product url
    AFFILIATE_PARTNERS = [].freeze

    def initialize(url, user)
      @user = user
      @uri = URI.parse(Addressable::URI.encode(url))
      @partner = detect_affiliate_partner(@uri)
    end

    def extract
      # If url generated by some shortener then
      # try to find direct product url for correct diffbot results
      partner_url = if short?(@uri)
                      process_short_url!

                      # short url points to supported partner
                      if @partner && @direct_url
                        # if this is affiliate url then we need to extract base product url without creator's credentials,
                        # some creators also have partner program and use its own affiliate urls
                        # eg.: http://click.linksynergy.com/link?id=QFGLnEolOWg&offerid=497794&type=15&murl=http%3A%2F%2Fwww.neimanmarcus.com%2FBadgley-Mischka-Draped-Shoulder-Stretch-Crepe-Gown-Magenta%2Fprod197990278_cat35350732__%2Fp.prod%3Ficid%3D%26searchType%3DEndecaDrivenCat%26rte%3D%25252Fcategory.service%25253FitemId%25253Dcat35350732%252526pageSize%25253D30%252526No%25253D30%252526Ns%25253DPCS_SORT%252526refinements%25253D%26eItemId%3Dprod197990278%26cmCat%3Dproduct&u1=n-cghnyrb8ma7--624507072
                        if @partner.affiliate_hosts.include?(@direct_url.host)
                          @direct_url = @partner.extract_url_from_affiliate(@direct_url,
                                                                            @user.affiliate_signature)
                        end
                        @direct_url
                      end
                      # if original uri supported by one of our partner
                    elsif @partner
                      # check lines 24-27
                      if @partner.affiliate_hosts.include?(@uri.host)
                        @direct_url = @partner.extract_url_from_affiliate(@uri,
                                                                          @user.affiliate_signature)
                      end
                      # generate affiliate url with our credentials if supported
                      @direct_url || @uri
                    end

      if partner_url && @partner && @partner.support?(partner_url)
        @user.setup_affiliate_signature
        @affiliate_url = @partner.new(partner_url, @user.affiliate_signature).affiliate_url
      end
    end

    def partner
      @partner::NAME if @partner
    end

    def short?(uri)
      URL_SHORTENERS.include?(uri.host)
    end

    # Possible response for both *URL_SHORTENERS* can be:
    # #<StringIO:0x007fa60327d610
    # @base_uri=#<URI::HTTP http://rstyle.me/n/cdw8pebgfnf>,
    # @meta={
    #   "content-type"=>"text/html; charset=UTF-8",
    #   "date"=>"Thu, 11 May 2017 20:49:13 GMT",
    #   "refresh"=>"0.1; URL=http://click.linksynergy.com/link?id=QFGLnEolOWg&murl=https%3A%2F%2Fwww.shopbop.com%2Fbelay-shoulder-bag-zac-posen%2Fvp%2Fv%3D1%2F1560563130.htm%3Ffm%3Dsearch-viewall%26os%3Dfalse&offerid=485004&type=15&u1=n-cdw8pebgfnf--624507072",
    #   "server"=>"nginx",
    #   "content-length"=>"1661",
    #   "connection"=>"keep-alive"
    # },
    # @metas={
    #   "content-type"=>["text/html; charset=UTF-8"],
    #   "date"=>["Thu, 11 May 2017 20:49:13 GMT"],
    #   "refresh"=>["0.1; URL=http://click.linksynergy.com/link?id=QFGLnEolOWg&murl=https%3A%2F%2Fwww.shopbop.com%2Fbelay-shoulder-bag-zac-posen%2Fvp%2Fv%3D1%2F1560563130.htm%3Ffm%3Dsearch-viewall%26os%3Dfalse&offerid=485004&type=15&u1=n-cdw8pebgfnf--624507072"],
    #   "server"=>["nginx"],
    #   "content-length"=>["1661"],
    #   "connection"=>["keep-alive"]
    # },
    # @status=["200", "OK"]>
    # Updates @uri, @partner if success
    def process_short_url!
      return unless short?(@uri)

      tries = 3
      uri = @uri
      begin
        response = uri.open(redirect: false)
        @direct_url = uri if response.meta['refresh'].nil?
      rescue OpenURI::HTTPRedirect => redirect
        # retry if there was redirect
        uri = redirect.uri
        retry if (tries -= 1).positive?
        raise
      rescue OpenURI::HTTPError
        @direct_url = uri
      end
      # there was redirect from original url, save redirect url
      if @direct_url
        @partner = detect_affiliate_partner(@direct_url)
        # Check meta for *refresh* key
      elsif response.meta && response.meta['refresh'] && response.meta['refresh'].match(/URL=(http.+)/)
        # Save this uri, we can use it for diffbot fetch to avoid blank results from short url
        @direct_url = URI.parse(Addressable::URI.encode(response.meta['refresh'].match(/URL=(http.+)/)[1]))
        # check if short url redirects to already supported partners
        @partner = detect_affiliate_partner(@direct_url)
      else
        message = 'Unexpected response from short url. Check it and add handler to process it correct.'
        Airbrake.notify(RuntimeError.new(message),
                        parameters: {
                          message: message,
                          data: { product_url: @uri, response: response.inspect }
                        })
      end
    end

    private

    # Return Class
    def detect_affiliate_partner(url)
      AFFILIATE_PARTNERS.detect { |partner| partner.support?(url) }
    end
  end
end
