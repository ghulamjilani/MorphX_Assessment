# frozen_string_literal: true
# This model is generated by acts_as_follower gem
class Follow < ActiveRecord::Base
  extend ActsAsFollower::FollowerLib
  extend ActsAsFollower::FollowScopes

  # NOTE: Follows belong to the "followable" interface, and also to followers
  belongs_to :followable, polymorphic: true
  belongs_to :follower,   polymorphic: true

  scope :not_deleted, lambda {
    joins("LEFT JOIN users ON users.id = follows.followable_id and follows.followable_type = 'User'")
      .joins("LEFT JOIN users AS followers ON followers.id = follows.follower_id and follows.followable_type = 'User'")
      .where('users.deleted IS NOT TRUE')
      .where('followers.deleted IS NOT TRUE')
  }

  after_create :send_message

  def block!
    update_attribute(:blocked, true)
  end

  private

  def send_message
    case followable
    when User
      Immerss::MultiFormatMailer.new.follow_me(followable, follower).deliver
    when Organization
      # TODO: - notify as well? Ask Alex
    when Channel
      # TODO: - notify as well? Ask Alex
    else
      raise ArgumentError, followable.inspect
    end
  end

  def user
    followable
  end
end
